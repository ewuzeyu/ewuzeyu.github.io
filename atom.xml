<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ewuzeyu.github.io/</id>
    <title>迷雾蓝屏</title>
    <updated>2023-02-05T14:44:30.376Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ewuzeyu.github.io/"/>
    <link rel="self" href="https://ewuzeyu.github.io/atom.xml"/>
    <subtitle>一世长安</subtitle>
    <logo>https://ewuzeyu.github.io/images/avatar.png</logo>
    <icon>https://ewuzeyu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 迷雾蓝屏</rights>
    <entry>
        <title type="html"><![CDATA[磁珠在核酸提取中]]></title>
        <id>https://ewuzeyu.github.io/post/ci-zhu-zai-he-suan-ti-qu-zhong/</id>
        <link href="https://ewuzeyu.github.io/post/ci-zhu-zai-he-suan-ti-qu-zhong/">
        </link>
        <updated>2023-02-05T14:43:16.000Z</updated>
        <content type="html"><![CDATA[<p><em><strong>注意：本文仅为网络信息汇总，正确性有待商榷</strong></em></p>
<h1 id="磁珠">磁珠</h1>
<p>磁珠内层结构略过；其外包裹四氧化三铁，为磁性来源；再外包裹高分子材料，其上偶联不同官能团。一般依据官能团不同，分为硅羟基磁珠，羧基磁珠，氨基/咪唑基磁珠和其他带正电磁珠。他们分别存在不同特性。</p>
<h1 id="基本原理基于硅羟基磁珠羧基磁珠等带负电的">基本原理（基于硅羟基磁珠，羧基磁珠等带负电的）</h1>
<p>首先是磁珠和DNA吸附，其中相互作用目前尚无定论，主流学说为盐桥理论。（硅羟基、羧基）磁珠表面带负电；DNA的磷酸基团带负电，若在PEG则会夺取DNA分子外水化层而加强这一过程。在溶液中高浓度的正离子可以与两边的负电性基团结合，成为‘盐桥’。另外疏水作用，氢键等也都是促进吸附的因素。</p>
<p>洗涤一般使用75-85%的乙醇溶液。这时盐被洗去，理论上会破坏盐桥，不过DNA并不容易溶解在此浓度乙醇中，他们沉积在磁珠周围，因此还是不易脱落。这里乙醇浓度很重要，浓度高时，体系中的水更少，因此清洗盐离子的能力减弱，但DNA回收率高；浓度低时可以更好洗去盐离子，但DNA损失变大。</p>
<p>在洗脱前要先晾干残留的乙醇。注意晾干时磁珠表面无光泽即可，过度干燥，体系失水过多，会导致磁珠DNA进一步聚集，最终DNA很难回溶到水中，影响回收率。</p>
<p>之后使用水或者TE缓冲液即可洗脱，因为此时体系中已经无法形成电桥的结构。</p>
<hr>
<p>对于带正电的磁珠，是通过调节pH实现核酸分子在磁珠表面的可逆结合。</p>
<h1 id="其他要点">其他要点</h1>
<h2 id="硅羟基磁珠和羧基磁珠的不同">硅羟基磁珠和羧基磁珠的不同</h2>
<p>硅羟基磁珠适合高浓度盐体系，如NaI、NaClO4、GuHCl、GuSCN等盐。<br>
其一般含有二氧化硅，因此用这种磁珠时体系的pH不能太高，一般不高于9。但二氧化硅磁性微球抗机械强度强，化学稳定性比较好。</p>
<p>羧基磁珠适合PEG和NaCl的体系。而且他们会令核酸分子从伸展的构象逐渐蜷缩成小球状，其上的负电荷也大部分被屏蔽掉，促使核酸分子吸附到磁珠上。（这种构象变化似乎在普通条件下也会发生，而且核酸分子越大越有变化的倾向，这也是一般情况下磁珠会优先吸附较长核酸片段的原因）通过以上性质，则可以实现片段筛选。<br>
另外，羧基磁珠具有超顺磁性、快速磁响应性、高羧基含量、单分散性和亚微米尺度粒径等特点，能够在特殊化学试剂（如EDC）的作用下将多肽、蛋白、寡聚核苷酸等生物配体共价偶联到微球表面。</p>
<h2 id="磁珠尺寸">磁珠尺寸</h2>
<p>尺寸越小悬浮性越好，但磁响应会减弱（磁铁吸得慢）。</p>
<h2 id="ph的影响">pH的影响</h2>
<p>除了上述硅羟基磁珠的特性外，pH会影响DNA和Si（硅）的带电性。pH3-9条件下，DNA一般带负电；pH5-7时，pH越高，Si表面的邻位硅烷醇基团就越多（不知具体原理），越利于DNA吸附。而pH超过7时，吸附DNA的能力则下降。</p>
<h2 id="其他">其他</h2>
<p>异丙醇挥发性低于乙醇，而且破坏水化层的能力比乙醇强。DNA在异丙醇中更难溶解。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[磁珠在核酸提取中]]></title>
        <id>https://ewuzeyu.github.io/post/magnetic_beads/</id>
        <link href="https://ewuzeyu.github.io/post/magnetic_beads/">
        </link>
        <updated>2023-02-03T14:43:16.000Z</updated>
        <content type="html"><![CDATA[<p><em><strong>注意：本文仅为网络信息汇总，正确性有待商榷</strong></em></p>
<h1 id="磁珠">磁珠</h1>
<p>磁珠内层结构略过；其外包裹四氧化三铁，为磁性来源；再外包裹高分子材料，其上偶联不同官能团。一般依据官能团不同，分为硅羟基磁珠，羧基磁珠，氨基/咪唑基磁珠和其他带正电磁珠。他们分别存在不同特性。</p>
<h1 id="基本原理基于硅羟基磁珠羧基磁珠等带负电的">基本原理（基于硅羟基磁珠，羧基磁珠等带负电的）</h1>
<p>首先是磁珠和DNA吸附，其中相互作用目前尚无定论，主流学说为盐桥理论。（硅羟基、羧基）磁珠表面带负电；DNA的磷酸基团带负电，若在PEG则会夺取DNA分子外水化层而加强这一过程。在溶液中高浓度的正离子可以与两边的负电性基团结合，成为‘盐桥’。另外疏水作用，氢键等也都是促进吸附的因素。</p>
<p>洗涤一般使用75-85%的乙醇溶液。这时盐被洗去，理论上会破坏盐桥，不过DNA并不容易溶解在此浓度乙醇中，他们沉积在磁珠周围，因此还是不易脱落。这里乙醇浓度很重要，浓度高时，体系中的水更少，因此清洗盐离子的能力减弱，但DNA回收率高；浓度低时可以更好洗去盐离子，但DNA损失变大。</p>
<p>在洗脱前要先晾干残留的乙醇。注意晾干时磁珠表面无光泽即可，过度干燥，体系失水过多，会导致磁珠DNA进一步聚集，最终DNA很难回溶到水中，影响回收率。</p>
<p>之后使用水或者TE缓冲液即可洗脱，因为此时体系中已经无法形成电桥的结构。</p>
<hr>
<p>对于带正电的磁珠，是通过调节pH实现核酸分子在磁珠表面的可逆结合。</p>
<h1 id="其他要点">其他要点</h1>
<h2 id="硅羟基磁珠和羧基磁珠的不同">硅羟基磁珠和羧基磁珠的不同</h2>
<p>硅羟基磁珠适合高浓度盐体系，如NaI、NaClO4、GuHCl、GuSCN等盐。<br>
其一般含有二氧化硅，因此用这种磁珠时体系的pH不能太高，一般不高于9。但二氧化硅磁性微球抗机械强度强，化学稳定性比较好。</p>
<p>羧基磁珠适合PEG和NaCl的体系。而且他们会令核酸分子从伸展的构象逐渐蜷缩成小球状，其上的负电荷也大部分被屏蔽掉，促使核酸分子吸附到磁珠上。（这种构象变化似乎在普通条件下也会发生，而且核酸分子越大越有变化的倾向，这也是一般情况下磁珠会优先吸附较长核酸片段的原因）通过以上性质，则可以实现片段筛选。<br>
另外，羧基磁珠具有超顺磁性、快速磁响应性、高羧基含量、单分散性和亚微米尺度粒径等特点，能够在特殊化学试剂（如EDC）的作用下将多肽、蛋白、寡聚核苷酸等生物配体共价偶联到微球表面。</p>
<h2 id="磁珠尺寸">磁珠尺寸</h2>
<p>尺寸越小悬浮性越好，但磁响应会减弱（磁铁吸得慢）。</p>
<h2 id="ph的影响">pH的影响</h2>
<p>除了上述硅羟基磁珠的特性外，pH会影响DNA和Si（硅）的带电性。pH3-9条件下，DNA一般带负电；pH5-7时，pH越高，Si表面的邻位硅烷醇基团就越多（不知具体原理），越利于DNA吸附。而pH超过7时，吸附DNA的能力则下降。</p>
<h2 id="其他">其他</h2>
<p>异丙醇挥发性低于乙醇，而且破坏水化层的能力比乙醇强。DNA在异丙醇中更难溶解。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[本地Blast 踩坑记录]]></title>
        <id>https://ewuzeyu.github.io/post/local_BLAST_index1/</id>
        <link href="https://ewuzeyu.github.io/post/local_BLAST_index1/">
        </link>
        <updated>2023-01-18T14:41:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="本地blast-踩坑记录">本地Blast 踩坑记录</h1>
<p>我主要使用的是核酸比对，blastn<br>
目前是2023年初，我使用的blast版本为2.13。网上的某些教程可能有点老，而blast某些功能用法修改后可能就不适用了。事实上，使用<code>blastn -help</code>的帮助文档可以得到极为详细的说明，非常重要。</p>
<h2 id="建库">建库</h2>
<p>使用<code>makeblastdb</code>命令从自己的序列文件创建比对库</p>
<pre><code class="language-sh">makeblastdb -dbtype [参数，nucl是核酸库，prot是蛋白库] -in [文件名字] -out [数据库名字，之后也会用到]
</code></pre>
<h2 id="查询">查询</h2>
<p><strong>重点</strong><br>
查询核酸序列使用<code>blastn</code>命令</p>
<pre><code>blastn -query [待查询序列文件] -db [数据库名字，就是上面的] -evalue [e值，越小越精确] -outfmt [输出格式] -task blastn -out [输出文件名]
</code></pre>
<p>上面的命令中，<code>-task blastn</code>就是我踩坑的点，所有中文教程都没提及，有些提到说是可以提高速度之类的可选项。虽然官方文档中有，但我一开始感觉以为前面<code>blastn</code>已经表明是核酸了，为什么后面还要再多此一举呢。结果后来找到一个外文论坛说<code>-task</code>对应的是权重矩阵，还是有必要的。所以我开始时blast都没有输出结果，后来加上这个参数就能正常输出了。<br>
麻了</p>
<h2 id="自定义格式输出">自定义格式输出</h2>
<p><code>-format [数字]</code>就规定了自定义输出，方便人类阅读的格式是0，1，2，3，4。而5之后的格式一般更适合使用程序处理。6，7等格式可以自定义，以表格形式输出你想要看的内容。<br>
譬如</p>
<pre><code>blastn -flag other -format &quot;6 delim=@ qlen qstart mismatch&quot;
</code></pre>
<p>上面format后面的内容是说，使用6的表格形式，分割符为@，仅输出查询序列长度（qlen），匹配查询序列开头（qstart），错配数量（mismatch）。具体的都可以看帮助文档。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[财务报表的小知识]]></title>
        <id>https://ewuzeyu.github.io/post/Financial_Statements/</id>
        <link href="https://ewuzeyu.github.io/post/Financial_Statements/">
        </link>
        <updated>2022-04-14T12:35:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="这是财务报表的小知识">这是财务报表的小知识</h1>
<h2 id="基本">基本</h2>
<p>BEA(Breakeven Analysis)收支平衡分析<br><br>
BEA = Fixed Cost / ( Price/Unit - Cost/Unit ) <br><br>
= 固定成本/(单位售价-单位成本) = 固定成本 - 单位利润</p>
<p>Market penetration Analysis 市场渗透分析<br><br>
Market Penetration = BEA * Price / Market Size</p>
<p>ROI 投资回报率</p>
<h2 id="工具-tools">工具 Tools</h2>
<p>The Balance sheet 资产负债表<br><br>
Income statement 损益表</p>
<ul>
<li>Net working capital 净运营资本</li>
</ul>
<p>statement of cashflow 现金流量表</p>
<ul>
<li>short-term solvency ratios 短期偿付能力比</li>
<li>activity ratios 活动比率</li>
<li>financial leverage ratios 财务杠杆比率</li>
<li>profitability ratio 盈利率</li>
</ul>
<h3 id="balance-sheet">Balance sheet</h3>
<p>assets = liabilities + equity<br><br>
资产 = 负债 + 净资产</p>
<h3 id="income-statement">Income statement</h3>
<p>Income = revenues - expenses<br><br>
利润 = 销售额 - 花费</p>
<h3 id="其他">其他</h3>
<p>cash flow 包括经营,投资,融资等</p>
<p>预测表</p>
<h2 id="财务报表分析">财务报表分析</h2>
<p>主要有四个角度: 偿付能力,活动比率,财务杠杆,盈利力</p>
<h3 id="sovency-ratios-偿付能力比率">sovency ratios 偿付能力比率</h3>
<p>流动比率 current ratio = Total current assets / Total current liabilities<br><br>
大约在 1-2 之间为好的,具体要在行业内对比</p>
<hr>
<p>速动比率 quick ratio = ( Total current assets - Inventory ) / Total current liabilities<br><br>
大约 1.1 是好的</p>
<h3 id="activities-ratio-活动比率">Activities ratio 活动比率</h3>
<p>资金周转率 asset turnover = Total revenue (sales) / Total assets<br><br>
越高越好,需要在行业内对比</p>
<hr>
<p>receivable turnover = Total Revenue (sales) / Receibables<br><br>
相应的有其天数为 Period / receivable turnover<br><br>
天数越短越好</p>
<hr>
<p>存货周转率 Inventory turnover = Cost of goods sold / Inventory<br><br>
相应的有其天数为 Period / Inventory turnover<br><br>
一般库存天数在 4-6 天为宜</p>
<h3 id="financial-leverage-ratio-财务杠杆比率">Financial leverage ratio 财务杠杆比率</h3>
<p>负债比率 Debt ratio = Total debt / Total assets</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式]]></title>
        <id>https://ewuzeyu.github.io/post/regular-expression/</id>
        <link href="https://ewuzeyu.github.io/post/regular-expression/">
        </link>
        <updated>2022-03-22T18:39:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="正则表达式的学习">正则表达式的学习</h1>
<p>参考教程 <a href="https://zhuanlan.zhihu.com/p/28672572">知乎链接</a></p>
<h2 id="简单字符">简单字符</h2>
<p>没有特殊意义的字符<br>
/abc/,/T_T/</p>
<h2 id="转义字符">转义字符</h2>
<p>用,用于匹配不方便显示的特殊字符或者定义的特殊意义的字符</p>
<p><code>/\.*+?|()[]{}-</code>等字符需要加转义字符<code>\</code></p>
<ul>
<li>\n 匹配换行</li>
<li>\r 匹配回车</li>
<li>\t 匹配制表符,tab</li>
<li>\v 匹配垂直制表符</li>
<li>\x+两个十六进制数字 匹配双字节字符</li>
<li>\u+四个十六进制数字 匹配Unicode字符(utf-8)</li>
<li>
<ul>
<li>汉字为\u4e00-\u9fa5</li>
</ul>
</li>
<li>
<ul>
<li>日文为\u0800-\u4e00</li>
</ul>
</li>
<li>\w 匹配字母,数字,下划线</li>
<li>\W 匹配除了字母,数字,下划线以外的字符</li>
<li>\s 匹配空白字符,如空格,tab等</li>
<li>\S 匹配非空白字符</li>
<li>\d 匹配数字字符</li>
<li>\D 匹配非数字字符</li>
<li>\b 匹配单词边界</li>
<li>\B 匹配非单词边界</li>
<li>\\ 匹配\自己</li>
</ul>
<h2 id="字符集和">字符集和</h2>
<p>使用<code>[]</code>匹配一类字符<br><br>
如[abc],[789]等<br><br>
中间字符很多时可以用<code>-</code>表示一个范围内的字符<br><br>
如[a-zA-Z],[0-9]等</p>
<p>在前面加<code>^</code>表示非,匹配范围之外的任意字符<br><br>
如[^abc]</p>
<p>还有内置字符集,如<code>.</code>匹配单个除了换行和行结束符的字符,等价于[^\n]</p>
<h2 id="量词">量词</h2>
<p>量词的记号放在后面</p>
<ul>
<li>{n}表示匹配n次</li>
<li>{m,n}表示匹配m-n次</li>
<li>{m,}表示匹配m到无穷多次</li>
<li>?表示匹配0或1次={0,1}</li>
<li>+表示匹配1到无穷多次={1,}</li>
<li>*表示匹配0到无穷多次={0,}</li>
</ul>
<p>正则匹配是贪婪的,会优先匹配上限<br><br>
可以在量词后面加?来开启非贪婪模式</p>
<h2 id="字符边界">字符边界</h2>
<p>如用xxx开头,用xxx结尾等</p>
<p><code>^</code>在[]外表示匹配开头,如^abc<br><br>
<code>$</code>表示匹配结尾,如abc$<br><br>
\b表示匹配单词边界</p>
<h2 id="选择表达式">选择表达式</h2>
<p>匹配几组多字符</p>
<p>使用<code>|</code>表示分组<br><br>
如123|456|789</p>
<h2 id="分组和引用">分组和引用</h2>
<p>使用<code>()</code>包裹表示一组,可以作用于量词<br><br>
如(abc){2},(123|789){3}</p>
<p>默认分组是可捕获分组<br><br>
可以在<code>(</code>前括号后加<code>?:</code>表示非捕获分组,提高性能和简化逻辑,如(?:abc)+</p>
<p>引用为<code>\+数字</code>,表示引用前面第几个捕获分组,非捕获分组无法被引用<br><br>
如匹配html标签时,<code>&lt;xxx&gt;&lt;/xxx&gt;</code>中xxx应保持一致,则使用<code>&lt;([a-z]+)&gt;&lt;\/\1&gt;</code>来匹配</p>
<h2 id="预搜索">预搜索</h2>
<p>正反向预搜索声明本身不会作为匹配的结果</p>
<p>正向预搜索:指定被搜索部分后面字符的特征</p>
<ul>
<li>正声明<code>(?= )</code>,匹配项后面的字符匹配指定字符<br><br>
如\d{4}(?=abc)可以匹配到1234abc,但无法匹配到7890def</li>
<li>反声明<code>(?! )</code>,匹配项后面的字符不是指定字符<br><br>
如\d{4}(?!abc)不能匹配1234abc,但可以匹配7890def</li>
</ul>
<p>反向预搜索:指定被搜索部分前面字符的特征</p>
<ul>
<li>正声明<code>(?&lt;= &gt;)</code>,匹配项前面字符匹配指定字符<br><br>
如(?&lt;=abc)\d{4}可以匹配abc1234,但不能匹配def7890</li>
<li>反声明<code>(?&lt;! &gt;)</code>,匹配项前面字符不是指定字符<br><br>
如(?&lt;!abc)\d{4}不能匹配abc1234,但可以匹配def7890</li>
</ul>
<h2 id="修饰符">修饰符</h2>
<p>修饰符位于表达式之外/pattern/flags</p>
<ul>
<li>i 不区分大小写</li>
<li>g 全局匹配(默认情况下只匹配到一个,g修饰符下会匹配多个)</li>
<li>m 多行匹配(默认情况下,^$是匹配文本的开始结束,m修饰符下会变为行的开头和结束)</li>
<li>s 特殊字符<code>.</code>可以匹配包含换行符</li>
<li>U 只匹配最近的一个字符,不重复匹配(相当于不贪婪?)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown 学习]]></title>
        <id>https://ewuzeyu.github.io/post/markdown_learn/</id>
        <link href="https://ewuzeyu.github.io/post/markdown_learn/">
        </link>
        <updated>2022-02-24T21:34:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Markdown</p>
]]></summary>
        <content type="html"><![CDATA[<p>Markdown</p>
<!-- more -->
<h1 id="目录">目录</h1>
<ul>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li>
<li><a href="#%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98">一级标题</a>
<ul>
<li><a href="#%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98">二级标题</a>
<ul>
<li><a href="#%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98">三级标题</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98-1">一级标题</a>
<ul>
<li><a href="#%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98-1">二级标题</a></li>
</ul>
</li>
<li><a href="#%E6%8D%A2%E8%A1%8C">换行</a></li>
<li><a href="#%E5%BC%BA%E8%B0%83">强调</a></li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a></li>
<li><a href="#%E5%88%97%E8%A1%A8">列表</a>
<ul>
<li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">有序列表</a></li>
<li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8">无序列表</a></li>
</ul>
</li>
<li><a href="#%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95">代码语法</a></li>
<li><a href="#%E5%88%86%E9%9A%94%E7%BA%BF">分隔线</a></li>
<li><a href="#%E9%93%BE%E6%8E%A5%E8%AF%AD%E6%B3%95">链接语法</a>
<ul>
<li><a href="#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E9%93%BE%E6%8E%A5">引用类型链接</a></li>
</ul>
</li>
<li><a href="#%E5%9B%BE%E7%89%87%E8%AF%AD%E6%B3%95">图片语法</a></li>
<li><a href="#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6">转义字符</a></li>
<li><a href="#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%93%8D%E4%BD%9C">特殊字符与操作</a>
<ul>
<li><a href="#%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2">字体颜色</a></li>
<li><a href="#%E7%A9%BA%E6%A0%BC">空格</a></li>
<li><a href="#%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7">数学符号</a></li>
</ul>
</li>
</ul>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<p>几个井号就几级标题<br><br>
井号后面加空格</p>
<h1 id="一级标题-2">一级标题</h1>
<p>下面划等号就是一级标题</p>
<h2 id="二级标题-2">二级标题</h2>
<p>下面划减号就是二级标题</p>
<h1 id="换行">换行</h1>
<p>用空行创建段落，不用缩进</p>
<p>用HTML标签换行<br>
<br><br>
就像这样，还在同一段落内<br>
只回车好像没有用</p>
<h1 id="强调">强调</h1>
<p>两个星号可以<strong>粗体</strong><br><br>
一个星号是<em>斜体</em><br><br>
三个星号是***同时粗体和斜体***</p>
<h1 id="引用">引用</h1>
<blockquote>
<p>大于号常见引用块<br><br>
多段落</p>
</blockquote>
<blockquote>
<p>多段落引用</p>
<p>中间空行也加一个大于号</p>
<blockquote>
<p>嵌套引用就多加大于号</p>
</blockquote>
</blockquote>
<h1 id="列表">列表</h1>
<h2 id="有序列表">有序列表</h2>
<ol>
<li>数字加点</li>
<li>不一定要按照数字顺序</li>
<li>但是第一个一定是1
<ol>
<li>可以嵌套</li>
<li>打个tab键</li>
</ol>
</li>
<li>嘿嘿</li>
</ol>
<h2 id="无序列表">无序列表</h2>
<ul>
<li>减号创建无序列表</li>
</ul>
<ul>
<li>加号也可以</li>
</ul>
<ul>
<li>星号同理
<ul>
<li>可以嵌套</li>
<li>tab键</li>
</ul>
</li>
<li>嵌套段落<br>
不加符号就是这样<br><br>
来个换行符
<blockquote>
<p>插入引用块</p>
</blockquote>
</li>
</ul>
<h1 id="代码语法">代码语法</h1>
<p>代码在反引号`中<br></p>
<p><code>code</code></p>
<pre><code>#include &lt;stdio.h&gt;
int main(){
    printf(&quot;hello,world&quot;);
    return 0;
}
</code></pre>
<p>用tab或者4个空格创建代码块</p>
<h1 id="分隔线">分隔线</h1>
<p>单独一行用三个星号或下划线</p>
<hr>
<p>星号</p>
<hr>
<p>下划线<br><br>
最好在分隔线前后加空白行</p>
<h1 id="链接语法">链接语法</h1>
<p>用方框框住链接，然后括号中是网址</p>
<p><a href="https://www.bilibili.com" title="bilibili">演示到bilibili链接</a></p>
<p>网址后面可以加空格，引号标题</p>
<p>或者直接放本教材<a href="https://markdown.com.cn/basic-syntax/links.html">https://markdown.com.cn/basic-syntax/links.html</a>链接<br><br>
邮箱地址<a href="mailto:fake@example.com">fake@example.com</a></p>
<h2 id="引用类型链接">引用类型链接</h2>
<p>内容中引用的第一部分用两组方括号，第一个是连接文字，第二个是标签<a href="https://www.bilibili.com">bilibili链接</a></p>
<p>第二部分中需要方框中的标签，后边跟冒号与空格</p>
<h1 id="图片语法">图片语法</h1>
<p>添加图像，使用感叹号，方括号中代替文本，图片链接在圆括号中，圆括号内连接后可选增加引号内的标题文本</p>
<figure data-type="image" tabindex="1"><img src="https://tvax4.sinaimg.cn/mw690/006SGjrugy1gzu1huavn1j30pk0kgtg7.jpg" alt="图片" title="标题" loading="lazy"></figure>
<h1 id="转义字符">转义字符</h1>
<ul>
<li>\</li>
<li>`</li>
<li>*</li>
<li>_</li>
<li>{ }</li>
<li>[ ]</li>
<li>( )</li>
<li>#</li>
<li>+</li>
<li>-</li>
<li>.</li>
<li>!</li>
<li>|</li>
</ul>
<p>小于号和＆符号特殊一点&lt;，&amp;<br><br>
markdown会自动转换</p>
<h1 id="特殊字符与操作">特殊字符与操作</h1>
<h2 id="字体颜色">字体颜色</h2>
<p>颜色:：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mrow><mi>a</mi><mi>b</mi><mi>c</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{red}{abc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord" style="color:red;"><span class="mord mathdefault" style="color:red;">a</span><span class="mord mathdefault" style="color:red;">b</span><span class="mord mathdefault" style="color:red;">c</span></span></span></span></span> <code>$\color{red}{abc}$</code><br><br>
字体：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">A</mi><mi mathvariant="script">B</mi><mi mathvariant="script">C</mi><mo>…</mo><mi mathvariant="script">X</mi><mi mathvariant="script">Y</mi><mi mathvariant="script">Z</mi></mrow><annotation encoding="application/x-tex">\mathcal{ABC … XYZ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal">A</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord mathcal" style="margin-right:0.05834em;">C</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathcal" style="margin-right:0.14643em;">X</span><span class="mord mathcal" style="margin-right:0.08222em;">Y</span><span class="mord mathcal" style="margin-right:0.07944em;">Z</span></span></span></span></span> <code>$\mathcal{ABC…}$</code></p>
<h2 id="进阶">进阶</h2>
<h2 id="空格">空格</h2>
<pre><code>|格式 |代码	|样例	|说明|
|----|----|----|----|
|两个quad空格	|`$a \qquad b$`|$a \qquad b$|两个m的宽度|
|一个quad空格	|`$a \quad b$`|$a \quad b$|一个m的宽度|
|大空格	|`$ a\ b$`|$ a\ b$|1/3m宽度|
|中等空格	|`$ a\;b$`|$ a\;b$|2/7m宽度|
|小空格	|`$a\,b$`|$a\,b$|1/6m宽度|
|没有空格	|`$ab$`|$ab$|1/3m宽度|
|紧帖	|`$a\!b$`|$a\!b$|缩进1/6m宽度|
</code></pre>
<h2 id="数学符号">数学符号</h2>
<pre><code>|符号|代码|
|----|----|
|$\lceil \frac{logN}{logn} \rceil$ |`$\lceil \frac{logN}{logn} \rceil$ `|
|$\sum$ |`$\sum$ `|
|$\sum_{i=0}^n$|`$\sum_{i=0}^n$`|
|$\sum\limits_{i=0}^n$ |`$\sum\limits_{i=0}^n$ `|
|${^1_2}A{^3_4}$ |`${^1_2}A{^3_4}$ `|
|$\frac{2}{3}$ |`$\frac{2}{3}$ `|
|$\frac{2^3}3{3}$ |`$\frac{2^3}3{3}$ `|
|$\frac{2_3}{3}$ |`$\frac{2_3}{3}$ `|
|$\lceil x \rceil$ |`$\lceil x \rceil$ `|
|$\lfloor x \rfloor$ |`$\lfloor x \rfloor$ `|
|$\sqrt{2}$|`$\sqrt{2}$`|
|$\sqrt[3]{8}$|`$\sqrt[3]{8}$`|
|$\times$ |`$\times$ `|
|$\pm$ |`$\pm$ `|
|$\div$ |`$\div$ `|
|$\mid$ |`$\mid$ `|
|$\cdot$ |`$\cdot$ `|
|$R^\prime$ |`$R^\prime$ `|
|$\dots$ |`$\dots$ `|
|$\cdots$ |`$\cdots$ `|
|$\vdots$ |`$\vdots$ `|
|$\ddots$ |`$\ddots$ `|
|$\circ$ |`$\circ$ `|
|$\ast $ |`$\ast $ `|
|$\bigotimes$ |`$\bigotimes$ `|
|$\bigoplus$ |`$\bigoplus$ `|
|$\equiv$ |`$\equiv$ `|
|$\not\equiv$ |`$\not\equiv$ `|
|$\pmod{m}$|`$\pmod{m}$`|
|$\leq$ |`$\leq$ `|
|$\geq$ |`$\geq$ `|
|$\neq$ |`$\neq$ `|
|$\approx$ |`$\approx$ `|
|$\prod$|`$\prod$`|
|$\coprod$|`$\coprod$`|
|$\cdots$ |`$\cdots$ `|
|$\int$ |`$\int$ `|
|$\iint$ |`$\iint$ `|
|$\oint$ |`$\oint$ `|
|$\infty$ |`$\infty$ `|
|$\nabla$ |`$\nabla$ `|
|$\because$ |`$\because$ `|
|$\therefore$ |`$\therefore$ `|
|$\forall$ |`$\forall$ `|
|$\exists$ |`$\exists$ `|
|$\not=$ |`$\not=$ `|
|$\not&gt;$ |`$\not&gt;$ `|
|$\leq$ |`$\leq$ `|
|$\geq$ |`$\geq$ `|
|$\not\subset$ |`$\not\subset$ `|
|$\emptyset$ |`$\emptyset$ `|
|$\varnothing$ |`$\varnothing$ `|
|$\in$ |`$\in$ `|
|$\ni$ |`$\ni$ `|
|$\notin$ |`$\notin$ `|
|$\subset$ |`$\subset$ `|
|$\subseteq$ |`$\subseteq$ `|
|$\bigcup$ |`$\bigcup$ `|
|$\bigcap$ |`$\bigcap$ `|
|$\bigvee$ |`$\bigvee$ `|
|$\bigwedge$ |`$\bigwedge$ `|
|$\biguplus$ |`$\biguplus$ `|
|$\bigsqcup$ |`$\bigsqcup$ `|
|$\hat{y}$ |`$\hat{y}$ `|
|$\check{y}$|`$\check{y}$`|
|$\breve{y}$|`$\breve{y}$`|
|$\bar x$|`$\bar x$`|
|$\acute{\eta}$|`$\acute{\eta}$`|
|$\ddot{y}$|`$\ddot{y}$`|
|$\dot{x}$|`$\dot{x}$`|
|$\overline{a+b+c+d}$ |`$\overline{a+b+c+d}$ `|
|$\underline{a+b+c+d}$ |`$\underline{a+b+c+d}$ `|
|$\bar q \to p$|`$\bar q \to p$`|
|$\uparrow$ |`$\uparrow$ `|
|$\downarrow$ |`$\downarrow$ `|
|$\Uparrow$ |`$\Uparrow$ `|
|$\Downarrow$ |`$\Downarrow$ `|
|$\rightarrow$ |`$\rightarrow$ `|
|$\leftarrow$ |`$\leftarrow$ `|
|$\Rightarrow$ |`$\Rightarrow$ `|
|$\Longleftarrow$ |`$\Longleftarrow$ `|
|$\longleftarrow$ |`$\longleftarrow$ `|
|$\longrightarrow$ |`$\longrightarrow$ `|
|$\Longrightarrow$ |`$\Longrightarrow$ `|
|$\alpha$ |`$\alpha$ `|
|$\beta$ |`$\beta$ `|
|$\gamma$ |`$\gamma$ `|
|$\Gamma$ |`$\Gamma$ `|
|$\delta$ |`$\delta$ `|
|$\Delta$ |`$\Delta$ `|
|$\epsilon$ |`$\epsilon$ `|
|$\varepsilon$ |`$\varepsilon$ `|
|$\zeta$ |`$\zeta$ `|
|$\eta$ |`$\eta$ `|
|$\theta$|`$\theta$`|
|$\Theta$|`$\Theta$`|
|$\vartheta$|`$\vartheta$`|
|$\iota$|`$\iota$`|
|$\pi$|`$\pi$`|
|$\phi$|`$\phi$`|
|$\Phi$|`$\Phi$`|
|$\psi$|`$\psi$`|
|$\Psi$|`$\Psi$`|
|$\omega$|`$\omega$`|
|$\Omega$|`$\Omega$`|
|$\chi$|`$\chi$`|
|$\rho$|`$\rho$`|
|$\omicron$|`$\omicron$`|
|$\sigma$|`$\sigma$`|
|$\Sigma$|`$\Sigma$`|
|$\nu$|`$\nu$`|
|$\xi$|`$\xi$`|
|$\tau$|`$\tau$`|
|$\lambda$|`$\lambda$`|
|$\Lambda$|`$\Lambda$`|
|$\mu$|`$\mu$`|
|$\partial$|`$\partial$`|
|$\lbrace \rbrace$|`$\lbrace \rbrace$`|
|$\overline{a}$|`$\overline{a}$`|</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python学习笔记 一]]></title>
        <id>https://ewuzeyu.github.io/post/python_learn_1/</id>
        <link href="https://ewuzeyu.github.io/post/python_learn_1/">
        </link>
        <updated>2022-02-21T22:19:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python学习笔记-一">python学习笔记 一</h1>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/">学习链接</a></p>
<h1 id="python基础">python基础</h1>
<p>python单行注释是用井号，多行注释可以用三个单引号或双引号</p>
<ul>
<li>python大小写敏感</li>
<li>语句后面没有结束符。</li>
<li>使用缩进识别代码块</li>
<li>当语句用冒号结尾时，缩进语句视为代码块</li>
</ul>
<h2 id="整数和负整数">整数和负整数</h2>
<p>十六进制数，前面加0x<br><br>
如0x9f5ab等</p>
<p>多位数字可以中间可以用_分隔<br><br>
10_000_000_000和10000000000完全一样，十六进制数同理</p>
<h2 id="浮点数">浮点数</h2>
<p>1.23  -9.65<br><br>
科学计数法:<br><br>
1.23e9   1.2e-5</p>
<h2 id="字符串">字符串</h2>
<p>单引号或双引号<br><br>
双引号可以引在单引号外表示'这个字符串<br><br>
也可以用转义字符<br></p>
<pre><code>\'  \&quot;  \n 换行     \t 制表符   \\ 反斜杠
</code></pre>
<p>打印时可以用r''表示''内的字符串默认不转义。<br><br>
同时允许在字符串内用三个单引号和三个点表示多行内容<br><br>
如下</p>
<pre><code>print('''line1
...line2
...line3''')
</code></pre>
<h2 id="布尔值-true-false">布尔值 True  False</h2>
<p>可以用and，or，not运算</p>
<p>空值<br><br>
None</p>
<h3 id="两种除法-和">两种除法 /和//</h3>
<p>10/3 结果为浮点数，刚好整数结果也是浮点数<br><br>
10//3 地板除，只取结果整数部分<br><br>
10%3 取余数<br></p>
<h2 id="编码">编码</h2>
<p>python3中使用Unicode编码<br><br>
ord()函数获取单个字符编码的整数表示<br><br>
chr()函数吧编码转换为对应字符<br><br>
'\u4e2d\u6587'和'中文'完全等价</p>
<p>bytes类型数据用b''表示</p>
<p>len()计算str包含多少字符<br><br>
若其中是bytes则计算字节数</p>
<h2 id="格式化-用实现">格式化 用%实现</h2>
<pre><code>'Hello,%s,you are %d'%('Jack',22)
&gt;&gt;&gt;Hello,Jack,you are 22
</code></pre>
<p>%%转义表示%字符</p>
<p>字符串的format()方法格式化<br><br>
f-string字符串，直接包含变量{var}。</p>
<h2 id="内置数据类型list">内置数据类型list</h2>
<p>如</p>
<pre><code>classmates=['Machael','Bob','Tony']
</code></pre>
<p>len(classmates)可以获得list元素个数</p>
<p>用索引访问元素，从0开始</p>
<pre><code>classmates[0]
</code></pre>
<p>索引-1直接获取最后一个元素，同理倒数第二为-2，倒数第三-3<br><br>
list.append(xxx)方法向list末尾追加元素xxx<br><br>
list.insert(index,xxx)方法把元素xxx插入index处位置<br><br>
list.pop(i)删除i处元素，缺省为最后一个元素</p>
<p>list中的元素类型可以不同，也可以是list<br><br>
空list长度为0</p>
<h2 id="有序列表tuple">有序列表tuple</h2>
<p>一旦初始化后不能修改</p>
<pre><code>classmates=('Mich','Bob','Tony')
</code></pre>
<p>定义空的tuple可以用</p>
<pre><code>t=()
</code></pre>
<p>定义只有一个元素的tuple需要加一个逗号</p>
<pre><code>t=(1,)
</code></pre>
<h2 id="条件判断">条件判断</h2>
<pre><code>if &lt;判断条件1&gt; :
    &lt;执行1&gt;
elif &lt;判断条件2&gt; :
    &lt;执行2&gt;
else:
    &lt;执行3&gt;
</code></pre>
<h2 id="循环">循环</h2>
<h3 id="for-in-循环">for in 循环</h3>
<pre><code>for x in range(101):
    sum = sum + x
print(sum)
</code></pre>
<p>for 变量i in list变量:<br><br>
i会遍历list中的每一个元素<br><br>
range(n)会生成0 ~ n-1的整数序列</p>
<h3 id="while循环">while循环</h3>
<p>只要条件满足就不断循环,不满足时推出循环</p>
<pre><code>while 条件:
    语句
</code></pre>
<h3 id="break和continue">break和continue</h3>
<p>break语句可以提前退出循环<br><br>
continue语句可以跳过当此循环</p>
<h2 id="dict和set">dict和set</h2>
<h3 id="dict字典">dict字典</h3>
<p>字典dict，使用key-value存储，查找速度快。<br>
创建字典</p>
<pre><code>d = {'Michael':95,'Bob':75,'Tony':85}
</code></pre>
<p>根据key读取value</p>
<pre><code>&gt;&gt;&gt;d['Bob']
75
</code></pre>
<p>也可以赋值</p>
<pre><code>d['Adam']=69
</code></pre>
<p>一个key只能对应一个value</p>
<p>用<code>in</code>判断key是否存在</p>
<pre><code>&gt;&gt;&gt;'Thmas' in d
False
</code></pre>
<p>或是用<code>get()</code>方法,不存在时返回None</p>
<pre><code>d.get('Thomas')
</code></pre>
<p>用<code>pop(key)</code>方法删除key</p>
<pre><code>d.pop('Bob')
</code></pre>
<h3 id="set">set</h3>
<p>set就是key的组合但不存储value,因此set中不能重复key<br><br>
常见set需要提供list作为输入集合</p>
<pre><code>s = set([1,2,3])
</code></pre>
<p>用<code>add(key)</code>方法添加元素<br>
用<code>remove(key)</code>方法删除元素</p>
<pre><code>s.add(4)
s.remove(4)
</code></pre>
<p>set之间可以做交际,并集操作</p>
<pre><code>s1 = set([1,2,3])
s2 = set([2,3,4])
s1 &amp; s2 #并集
&gt;&gt;&gt;{2,3}
s1 | s2 #交集
&gt;&gt;&gt;{1,2,3,4}
</code></pre>
<hr>
<h2 id="关于可变和不可变变量">关于可变和不可变变量</h2>
<p>可变对象:list dict set<br><br>
不可变对象: tuple string int float bool</p>
<p>对于可变对象,函数收到其引用,因此可以改变原始值<br><br>
对于不可变对象,相当于传值,则不能改变原始对象</p>
<hr>
<h1 id="函数">函数</h1>
<h2 id="调用函数">调用函数</h2>
<p>使用<code>help(函数名)</code>查看其帮助信息</p>
<p>abs()参数只有一个,返回其绝对值<br><br>
max()可以接受多个参数,返回最大的<br></p>
<p>数据类型转换<br><br>
int(),float(),str(),bool()</p>
<p>函数名指向一个函数对象的引用,可以把函数名赋给一个变量.</p>
<h2 id="定义函数">定义函数</h2>
<p>使用<code>def</code>语句,写出函数名,括号,括号中的参数和冒号,在缩进块中写函数体,用<code>return</code>语句返回.</p>
<pre><code>def myFunction(x):
    sentence1
    sentence3
    return x
</code></pre>
<p>没有<code>return</code>时默认返回<code>None</code>,<code>return None</code>可以简写为<code>return</code></p>
<p>空函数<br><br>
用<code>pass</code>语句占位,什么也不做</p>
<pre><code>def nop():
    pass
</code></pre>
<p>数据类型检查可以用<code>isinstance()</code></p>
<pre><code>if not isinstance(x,(int,float)):
    raise TypeError('bad operand type')
</code></pre>
<p>如果传入错误参数类型就会抛出一个错误</p>
<p>函数可以返回多个值</p>
<pre><code>return x,y
</code></pre>
<p>实际上返回的是<code>tuple</code></p>
<h2 id="函数的参数">函数的参数</h2>
<h3 id="位置参数">位置参数</h3>
<p>函数参数为多个，调用时传入按位置顺序依次赋值</p>
<h3 id="默认参数">默认参数</h3>
<p>定义时设置如<code>x=2</code>,则其为默认值,可以缺省.<br><br>
必选参数要放在默认参数前面<br><br>
<strong>!!warn!!</strong> 默认参数必须指向不变对象</p>
<h3 id="可变参数">可变参数</h3>
<p>在定义时参数前面加<code>*</code>号</p>
<pre><code>def Function(*x):
    sentence
    return
</code></pre>
<p>函数内部接收后自动组装为tuple<br><br>
在调用时,可以在list或tuple前面加<code>*</code>号,将其元素变成可变参数传入函数</p>
<pre><code>Function(*tuple)
</code></pre>
<h3 id="关键字参数">关键字参数</h3>
<p>传入参数在函数内自动组装为dict</p>
<pre><code>def Function(**kw):
    pass
</code></pre>
<p>调用</p>
<pre><code>Function(key='value')
</code></pre>
<p>也可以将一个dict直接传入函数</p>
<pre><code>Function(**dict)
</code></pre>
<h3 id="命名关键字参数">命名关键字参数</h3>
<p>令函数只接受某些关键字的参数<br><br>
需要一个特殊分隔符<code>*</code>,其后的参数作为命名关键字参数</p>
<pre><code>def Function(a,b,*,key1,key2)
    pass
</code></pre>
<p>这里<code>*</code>的作用可以被可变参数代替,即若有可变参数,则不需要<code>*</code></p>
<pre><code>def Function(a,*b,key1,key2)
</code></pre>
<hr>
<h3 id="总结">总结</h3>
<p>定义函数可以用上述五种参数组合,但其顺序必须是:<br></p>
<ol>
<li>必须参数</li>
<li>默认参数</li>
<li>可变参数</li>
<li>命名关键字参数</li>
<li>关键字参数</li>
</ol>
<h2 id="递归函数">递归函数</h2>
<p>即函数可以调用自身</p>
<pre><code>def fact(n): # 计算阶乘函数
    if n == 1:
        return 1
    return n * fact(n-1)
</code></pre>
<p>为避免栈溢出,使用<strong>尾递归优化</strong><br><br>
尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式</p>
<pre><code>def fact(n):
    return fact_iter(n,1)

def fact_iter(num,product):
    if num == 1:
        return product
    return fact_iter(num-1,num*product)
</code></pre>
<p>挺好</p>
<h1 id="python高级特性">python高级特性</h1>
<h2 id="切片">切片</h2>
<p>诸如,取出list中某索引范围的值<br><br>
<code>a:b:c</code>从a开始到b间隔为c<br><br>
若<code>a=0,c=1</code>可缺省<br><br>
也可以倒数取<code>-5:-1</code></p>
<p>可用于list,tuple,字符串</p>
<pre><code>list[:]
tuple[:3]
'ABCDEF'[-3:-1]
</code></pre>
<p><strong>tips</strong> 诸如将序列倒序可以用<code>n[::-1]</code></p>
<h2 id="迭代">迭代</h2>
<p>for循环遍历list或tuple</p>
<pre><code>for i in list:
    pass
for i in tuple:
    pass
</code></pre>
<p>也可以迭代dict</p>
<pre><code>for key in dict:
    pass
</code></pre>
<p>若要迭代value,可以用<code>for value in dict.values()</code><br><br>
若要同时迭代key和value,可以用`for key,value in dict.items()'</p>
<p>字符串也可以遍历,<code>for ch in 'ABC':</code></p>
<p>使用collections.abc模块的Iterable类型判断一个对象是否可以迭代</p>
<pre><code>from collections.abc import Iterable
isinstance('abc',Iterable)
#若可迭代,结果为True,否则False
</code></pre>
<p>使用<code>enumerate</code>函数将list变为索引-元素对,可以在for循环中同时迭代索引和元素</p>
<pre><code>for i,value in enumerate(['A','B','C']):
</code></pre>
<h2 id="列表生成式">列表生成式</h2>
<p>要生成list<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>,可以用<code>list(range(1, 11))</code></p>
<p>要生成类似<code>[1*1,2*2,3*3,...,10*10]</code>,则可以用<code>[x*x for x in range(1,11)]</code>,把要生成的元素放在前面,后面跟for循环</p>
<p>若用if...else<br><br>
可以在后面只加if:<code>[x for x in range(1,11) if x % 2 == 0]</code><br><br>
或者在前面加if...else:<code>[x if x % 2 == 0 else -x for x in range(1,11)]</code></p>
<h2 id="生成器">生成器</h2>
<p>不必创造完整的list,节省内存<br><br>
一边循环一边计算,生成器generator</p>
<p>创建generator<br><br>
方法一,把列表生成式的<code>[ ]</code>改成<code>( )</code>即可</p>
<pre><code>g = (x*x for x in range(10))
</code></pre>
<p>打印generator可以用next()函数,它不断获取其下一个返回值<br><br>
或是for循环<code>for n in g: print(n)</code></p>
<p>用<code>yield</code>关键字定义generator,一个函数定义中包含<code>yield</code>,则这个函数为generator函数<br><br>
generator函数调用next()时执行,遇到<code>yield</code>语句返回,再次执行时从上次返回的<code>yield</code>处继续执行.</p>
<p>如斐波那契数列生成</p>
<pre><code>def fib(max):
    n,a,b = 0,0,1
    while n &lt; max:
        yield b
        a,b = b,a+b
        n=n+1
    return 'done'

for i in fib()
f=fib(6) #需要这样做,之后就用f,不然每次调用函数会重新生成
</code></pre>
<h2 id="迭代器">迭代器</h2>
<p>可以直接作用于for循环的对象统称可迭代对象<code>Iterable</code><br><br>
使用<code>isinstance()</code>判断是否Iterable对象</p>
<pre><code>from collections.abc import Iterable
isinstance([],Iterable)
</code></pre>
<p>可以用<code>next()</code>函数调用并返回下一个值的对象称为迭代器<code>Iterator</code><br><br>
使用<code>isinstance()</code>判断是否迭代器</p>
<pre><code>from collections.abc import Iterator
isinstance((x for x in range(10)),Iterator)
</code></pre>
<p>生成器都是Iterator对象<br><br>
list,dict,str是Iterable但不是Iterator,但他们可以用<code>iter()</code>函数编程Iterator</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些典型的日系风格人像]]></title>
        <id>https://ewuzeyu.github.io/post/bishojonoshashin/</id>
        <link href="https://ewuzeyu.github.io/post/bishojonoshashin/">
        </link>
        <updated>2022-02-19T22:41:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="日系风格的一些特点">日系风格的一些特点</h2>
<hr>
<ul>
<li>高调</li>
<li>低对比</li>
<li>过曝</li>
<li>逆光</li>
<li>青色调</li>
</ul>
<p>日系本就是某种难以清晰界定的风格<br><br>
并不是所有日系都必须符合以上特点</p>
<p>但是下面来看一些典型<br><br>
图片来源网络</p>
<hr>
<p><img src="https://tva2.sinaimg.cn/mw690/006SGjrugy1gzmybp2eelj33ga4h7b2c.jpg" alt="1" loading="lazy"><br>
<img src="https://tva2.sinaimg.cn/mw690/006SGjrugy1gzmy9n4b0aj314w1njngq.jpg" alt="2" loading="lazy"><br>
<img src="https://tva3.sinaimg.cn/mw690/006SGjrugy1gzmy8jle86j312w1kmk93.jpg" alt="3" loading="lazy"><br>
<br></p>
<hr>
<p>还是比较典型的<br><br>
整体明亮，逆光，局部过曝<br><br>
逆光很好的勾勒出了人物边缘，突出了主题</p>
<hr>
<br>
<figure data-type="image" tabindex="1"><img src="https://tvax2.sinaimg.cn/mw690/006SGjrugy1gzmxwenkh4j30y41f7u0o.jpg" alt="4" loading="lazy"></figure>
<br>
<hr>
<p>低对比度，青色调</p>
<hr>
<br>
<p><img src="https://tvax1.sinaimg.cn/mw690/006SGjrugy1gzmyh5lex7j33co4vx1kz.jpg" alt="5" loading="lazy"><br>
<img src="https://tva2.sinaimg.cn/mw690/006SGjrugy1gzmy2k0ad7j32rz1uox6r.jpg" alt="6" loading="lazy"><br>
<img src="https://tva4.sinaimg.cn/mw690/006SGjrugy1gzmycyx3lnj32la3s94qu.jpg" alt="7" loading="lazy"></p>
<br>
<hr>
<p>相对而言中规中矩，但仍然可以算日系，因为其画面表达的正是日系的宁静、小清新的主题</p>
<br>
<hr>
<br>
<p>其实上面这些都是国内摄影师拍的<br><br>
下面这张三上老师和相泽老师的自拍，才是真正的日系照片[doge]<br>
<br><br>
<img src="https://tvax2.sinaimg.cn/mw690/006SGjrugy1gzmz32ukphj30u011in4f.jpg" alt="1645563502125" loading="lazy"><br>
<br><br>
iphone前置镜头果然不行<br><br>
p的有点狠，快认不出来了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git操作学习笔记  一]]></title>
        <id>https://ewuzeyu.github.io/post/git_learning/</id>
        <link href="https://ewuzeyu.github.io/post/git_learning/">
        </link>
        <updated>2022-02-19T14:09:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git操作的学习笔记-一">git操作的学习笔记  一</h1>
<p>链接<br>
<a href="https://zhuanlan.zhihu.com/p/276376558" title="git">git操作</a></p>
<h2 id="git-工作流程">git 工作流程</h2>
<ul>
<li>工作区(Workspace)</li>
<li>暂存区(Index/Stage)</li>
<li>本地仓库(Respository)</li>
<li>远程仓库(Remote)</li>
</ul>
<hr>
<p><strong>远程仓库&lt;-(push)- -(pull/clone)-&gt;本地仓库&lt;-(commit)-暂存区&lt;-(add)-工作区</strong></p>
<hr>
<h3 id="基本工作流程">基本工作流程</h3>
<ol>
<li>在工作区中添加修改文件</li>
<li>工作区中的文件放入暂存区</li>
<li>暂存区的文件提交本地git本地仓库</li>
<li>本地仓库推送到远程仓库</li>
</ol>
<h2 id="操作">操作</h2>
<h3 id="初始化">初始化</h3>
<p>两种方式初始化</p>
<pre><code># 方式一:本地生成git
git init
# 方式二:远端克隆仓库
git clone https://github.com/xx/xx.git
</code></pre>
<p>基本配置</p>
<pre><code># 配置用户名
git config --global user.name &quot;name&quot;
# 配置邮箱
git config --global user.email &quot;name@mail.com&quot;
</code></pre>
<p>删除远程仓库</p>
<pre><code>git remote rm origin
</code></pre>
<p>添加远程仓库</p>
<pre><code>git remote add origin https://github.com/xx/xx.git
</code></pre>
<h3 id="推送到远程仓库">推送到远程仓库</h3>
<p>将已修改文件添加到暂存区</p>
<pre><code>git add dir/filename # 添加指定文件
git add . # 添加所有已修改文件
</code></pre>
<p>暂存区改动提交到本地仓库<br><br>
<code>git commit</code>命令后在本地仓库生成40位哈希值,用于版本回退</p>
<pre><code>git commit -m &quot;message&quot; # message即本次提交的说明
</code></pre>
<p>上传至远程仓库</p>
<pre><code>git push -u origin master # master可以换为其他分支
</code></pre>
<h3 id="从远程仓库拉取">从远程仓库拉取</h3>
<p>更新本地</p>
<pre><code>git pull origin master # master可以换为其他分支</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【柚斐书评】《月亮与六便士》]]></title>
        <id>https://ewuzeyu.github.io/post/review_TheMoonAndSixpence/</id>
        <link href="https://ewuzeyu.github.io/post/review_TheMoonAndSixpence/">
        </link>
        <updated>2021-10-06T07:45:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="月亮与六便士书评">《月亮与六便士》书评</h2>
<br>
<p>这本书引人深思，人生的意义是什么，我们又该追求怎样的人生。</p>
<hr>
<br>
<p>毫无疑问小说的主人公应该是思特里克兰德，但描述却是以“我”这个有限的视角展开。大致可以分为三段。第一段讲我与思特里克兰德的渊源，以及他突然追求变化的原因。第二段时隔五年再次深入思特里克兰德的生活。第三段则是他死后多年，来到他晚年曾住的地方探访曾经的故事。也大概从几个侧面，表现出了思特里克兰德这个特点鲜明的角色。</p>
<br>
<p>思特里克兰德是个一心追求崇高理想的艺术家。他对于物质生活毫不在乎，也近乎无视社会人伦，却狂热地追求艺术理想。他抛弃一切去过想要的生活确实相当有魄力。不过有一点遗憾的是作者似乎并没有特别明确地表达思特里克兰德作品传达的、或者本人追求的艺术理念。通篇看下来就是泛泛而谈地给人震撼，多么深刻难以理解的美。当然其角色原型高更也是个印象派画家，其中特色大概也只可意会不可言传，如此表达反倒也妥当。纵观来看，大概他是在追求一种不加雕琢的原始的美感。</p>
<br>
<p>当然我本人身在秩序阵营，对于这样的角色其实不太喜欢。追求理念确实可贵，但却也不至于否认其余一切。他漠视社会人伦，远离文明，颇有历史虚无之感，不论从艺术价值还是内在发展逻辑而言都不太妥当。</p>
<br>
<hr>
<p><em>柚斐</em><br>
<em>2021.10.7</em></p>
]]></content>
    </entry>
</feed>