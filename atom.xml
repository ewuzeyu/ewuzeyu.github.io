<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ewuzeyu.github.io/</id>
    <title>迷雾蓝屏</title>
    <updated>2022-02-23T16:21:36.643Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ewuzeyu.github.io/"/>
    <link rel="self" href="https://ewuzeyu.github.io/atom.xml"/>
    <subtitle>一世长安</subtitle>
    <logo>https://ewuzeyu.github.io/images/avatar.png</logo>
    <icon>https://ewuzeyu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 迷雾蓝屏</rights>
    <entry>
        <title type="html"><![CDATA[python学习笔记 一]]></title>
        <id>https://ewuzeyu.github.io/post/python-xue-xi-bi-ji-yi/</id>
        <link href="https://ewuzeyu.github.io/post/python-xue-xi-bi-ji-yi/">
        </link>
        <updated>2022-02-23T02:19:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python学习笔记-一">python学习笔记 一</h1>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/">学习链接</a></p>
<h1 id="python基础">python基础</h1>
<p>python单行注释是用井号，多行注释可以用三个单引号或双引号</p>
<ul>
<li>python大小写敏感</li>
<li>语句后面没有结束符。</li>
<li>使用缩进识别代码块</li>
<li>当语句用冒号结尾时，缩进语句视为代码块</li>
</ul>
<h2 id="整数和负整数">整数和负整数</h2>
<p>十六进制数，前面加0x<br><br>
如0x9f5ab等</p>
<p>多位数字可以中间可以用_分隔<br><br>
10_000_000_000和10000000000完全一样，十六进制数同理</p>
<h2 id="浮点数">浮点数</h2>
<p>1.23  -9.65<br><br>
科学计数法:<br><br>
1.23e9   1.2e-5</p>
<h2 id="字符串">字符串</h2>
<p>单引号或双引号<br><br>
双引号可以引在单引号外表示'这个字符串<br><br>
也可以用转义字符<br></p>
<pre><code>\'  \&quot;  \n 换行     \t 制表符   \\ 反斜杠
</code></pre>
<p>打印时可以用r''表示''内的字符串默认不转义。<br><br>
同时允许在字符串内用三个单引号和三个点表示多行内容<br><br>
如下</p>
<pre><code>print('''line1
...line2
...line3''')
</code></pre>
<h2 id="布尔值-true-false">布尔值 True  False</h2>
<p>可以用and，or，not运算</p>
<p>空值<br><br>
None</p>
<h3 id="两种除法-和">两种除法 /和//</h3>
<p>10/3 结果为浮点数，刚好整数结果也是浮点数<br><br>
10//3 地板除，只取结果整数部分<br><br>
10%3 取余数<br></p>
<h2 id="编码">编码</h2>
<p>python3中使用Unicode编码<br><br>
ord()函数获取单个字符编码的整数表示<br><br>
chr()函数吧编码转换为对应字符<br><br>
'\u4e2d\u6587'和'中文'完全等价</p>
<p>bytes类型数据用b''表示</p>
<p>len()计算str包含多少字符<br><br>
若其中是bytes则计算字节数</p>
<h2 id="格式化-用实现">格式化 用%实现</h2>
<pre><code>'Hello,%s,you are %d'%('Jack',22)
&gt;&gt;&gt;Hello,Jack,you are 22
</code></pre>
<p>%%转义表示%字符</p>
<p>字符串的format()方法格式化<br><br>
f-string字符串，直接包含变量{var}。</p>
<h2 id="内置数据类型list">内置数据类型list</h2>
<p>如</p>
<pre><code>classmates=['Machael','Bob','Tony']
</code></pre>
<p>len(classmates)可以获得list元素个数</p>
<p>用索引访问元素，从0开始</p>
<pre><code>classmates[0]
</code></pre>
<p>索引-1直接获取最后一个元素，同理倒数第二为-2，倒数第三-3<br><br>
list.append(xxx)方法向list末尾追加元素xxx<br><br>
list.insert(index,xxx)方法把元素xxx插入index处位置<br><br>
list.pop(i)删除i处元素，缺省为最后一个元素</p>
<p>list中的元素类型可以不同，也可以是list<br><br>
空list长度为0</p>
<h2 id="有序列表tuple">有序列表tuple</h2>
<p>一旦初始化后不能修改</p>
<pre><code>classmates=('Mich','Bob','Tony')
</code></pre>
<p>定义空的tuple可以用</p>
<pre><code>t=()
</code></pre>
<p>定义只有一个元素的tuple需要加一个逗号</p>
<pre><code>t=(1,)
</code></pre>
<h2 id="条件判断">条件判断</h2>
<pre><code>if &lt;判断条件1&gt; :
    &lt;执行1&gt;
elif &lt;判断条件2&gt; :
    &lt;执行2&gt;
else:
    &lt;执行3&gt;
</code></pre>
<h2 id="循环">循环</h2>
<h3 id="for-in-循环">for in 循环</h3>
<pre><code>for x in range(101):
    sum = sum + x
print(sum)
</code></pre>
<p>for 变量i in list变量:<br><br>
i会遍历list中的每一个元素<br><br>
range(n)会生成0 ~ n-1的整数序列</p>
<h3 id="while循环">while循环</h3>
<p>只要条件满足就不断循环,不满足时推出循环</p>
<pre><code>while 条件:
    语句
</code></pre>
<h3 id="break和continue">break和continue</h3>
<p>break语句可以提前退出循环<br><br>
continue语句可以跳过当此循环</p>
<h2 id="dict和set">dict和set</h2>
<h3 id="dict字典">dict字典</h3>
<p>字典dict，使用key-value存储，查找速度快。<br>
创建字典</p>
<pre><code>d = {'Michael':95,'Bob':75,'Tony':85}
</code></pre>
<p>根据key读取value</p>
<pre><code>&gt;&gt;&gt;d['Bob']
75
</code></pre>
<p>也可以赋值</p>
<pre><code>d['Adam']=69
</code></pre>
<p>一个key只能对应一个value</p>
<p>用<code>in</code>判断key是否存在</p>
<pre><code>&gt;&gt;&gt;'Thmas' in d
False
</code></pre>
<p>或是用<code>get()</code>方法,不存在时返回None</p>
<pre><code>d.get('Thomas')
</code></pre>
<p>用<code>pop(key)</code>方法删除key</p>
<pre><code>d.pop('Bob')
</code></pre>
<h3 id="set">set</h3>
<p>set就是key的组合但不存储value,因此set中不能重复key<br><br>
常见set需要提供list作为输入集合</p>
<pre><code>s = set([1,2,3])
</code></pre>
<p>用<code>add(key)</code>方法添加元素<br>
用<code>remove(key)</code>方法删除元素</p>
<pre><code>s.add(4)
s.remove(4)
</code></pre>
<p>set之间可以做交际,并集操作</p>
<pre><code>s1 = set([1,2,3])
s2 = set([2,3,4])
s1 &amp; s2 #并集
&gt;&gt;&gt;{2,3}
s1 | s2 #交集
&gt;&gt;&gt;{1,2,3,4}
</code></pre>
<hr>
<h2 id="关于可变和不可变变量">关于可变和不可变变量</h2>
<p>可变对象:list dict set<br><br>
不可变对象: tuple string int float bool</p>
<p>对于可变对象,函数收到其引用,因此可以改变原始值<br><br>
对于不可变对象,相当于传值,则不能改变原始对象</p>
<hr>
<h1 id="函数">函数</h1>
<h2 id="调用函数">调用函数</h2>
<p>使用<code>help(函数名)</code>查看其帮助信息</p>
<p>abs()参数只有一个,返回其绝对值<br><br>
max()可以接受多个参数,返回最大的<br></p>
<p>数据类型转换<br><br>
int(),float(),str(),bool()</p>
<p>函数名指向一个函数对象的引用,可以把函数名赋给一个变量.</p>
<h2 id="定义函数">定义函数</h2>
<p>使用<code>def</code>语句,写出函数名,括号,括号中的参数和冒号,在缩进块中写函数体,用<code>return</code>语句返回.</p>
<pre><code>def myFunction(x):
    sentence1
    sentence3
    return x
</code></pre>
<p>没有<code>return</code>时默认返回<code>None</code>,<code>return None</code>可以简写为<code>return</code></p>
<p>空函数<br><br>
用<code>pass</code>语句占位,什么也不做</p>
<pre><code>def nop():
    pass
</code></pre>
<p>数据类型检查可以用<code>isinstance()</code></p>
<pre><code>if not isinstance(x,(int,float)):
    raise TypeError('bad operand type')
</code></pre>
<p>如果传入错误参数类型就会抛出一个错误</p>
<p>函数可以返回多个值</p>
<pre><code>return x,y
</code></pre>
<p>实际上返回的是<code>tuple</code></p>
<h2 id="函数的参数">函数的参数</h2>
<h3 id="位置参数">位置参数</h3>
<p>函数参数为多个，调用时传入按位置顺序依次赋值</p>
<h3 id="默认参数">默认参数</h3>
<p>定义时设置如<code>x=2</code>,则其为默认值,可以缺省.<br><br>
必选参数要放在默认参数前面<br><br>
<strong>!!warn!!</strong> 默认参数必须指向不变对象</p>
<h3 id="可变参数">可变参数</h3>
<p>在定义时参数前面加<code>*</code>号</p>
<pre><code>def Function(*x):
    sentence
    return
</code></pre>
<p>函数内部接收后自动组装为tuple<br><br>
在调用时,可以在list或tuple前面加<code>*</code>号,将其元素变成可变参数传入函数</p>
<pre><code>Function(*tuple)
</code></pre>
<h3 id="关键字参数">关键字参数</h3>
<p>传入参数在函数内自动组装为dict</p>
<pre><code>def Function(**kw):
    pass
</code></pre>
<p>调用</p>
<pre><code>Function(key='value')
</code></pre>
<p>也可以将一个dict直接传入函数</p>
<pre><code>Function(**dict)
</code></pre>
<h3 id="命名关键字参数">命名关键字参数</h3>
<p>令函数只接受某些关键字的参数<br><br>
需要一个特殊分隔符<code>*</code>,其后的参数作为命名关键字参数</p>
<pre><code>def Function(a,b,*,key1,key2)
    pass
</code></pre>
<p>这里<code>*</code>的作用可以被可变参数代替,即若有可变参数,则不需要<code>*</code></p>
<pre><code>def Function(a,*b,key1,key2)
</code></pre>
<hr>
<h3 id="总结">总结</h3>
<p>定义函数可以用上述五种参数组合,但其顺序必须是:<br></p>
<ol>
<li>必须参数</li>
<li>默认参数</li>
<li>可变参数</li>
<li>命名关键字参数</li>
<li>关键字参数</li>
</ol>
<h2 id="递归函数">递归函数</h2>
<p>即函数可以调用自身</p>
<pre><code>def fact(n): # 计算阶乘函数
    if n == 1:
        return 1
    return n * fact(n-1)
</code></pre>
<p>为避免栈溢出,使用<strong>尾递归优化</strong><br><br>
尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式</p>
<pre><code>def fact(n):
    return fact_iter(n,1)

def fact_iter(num,product):
    if num == 1:
        return product
    return fact_iter(num-1,num*product)
</code></pre>
<p>挺好</p>
<h1 id="python高级特性">python高级特性</h1>
<h2 id="切片">切片</h2>
<p>诸如,取出list中某索引范围的值<br><br>
<code>a:b:c</code>从a开始到b间隔为c<br><br>
若<code>a=0,c=1</code>可缺省<br><br>
也可以倒数取<code>-5:-1</code></p>
<p>可用于list,tuple,字符串</p>
<pre><code>list[:]
tuple[:3]
'ABCDEF'[-3:-1]
</code></pre>
<p><strong>tips</strong> 诸如将序列倒序可以用<code>n[::-1]</code></p>
<h2 id="迭代">迭代</h2>
<p>for循环遍历list或tuple</p>
<pre><code>for i in list:
    pass
for i in tuple:
    pass
</code></pre>
<p>也可以迭代dict</p>
<pre><code>for key in dict:
    pass
</code></pre>
<p>若要迭代value,可以用<code>for value in dict.values()</code><br><br>
若要同时迭代key和value,可以用`for key,value in dict.items()'</p>
<p>字符串也可以遍历,<code>for ch in 'ABC':</code></p>
<p>使用collections.abc模块的Iterable类型判断一个对象是否可以迭代</p>
<pre><code>from collections.abc import Iterable
isinstance('abc',Iterable)
#若可迭代,结果为True,否则False
</code></pre>
<p>使用<code>enumerate</code>函数将list变为索引-元素对,可以在for循环中同时迭代索引和元素</p>
<pre><code>for i,value in enumerate(['A','B','C']):
</code></pre>
<h2 id="列表生成式">列表生成式</h2>
<p>要生成list<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>,可以用<code>list(range(1, 11))</code></p>
<p>要生成类似<code>[1*1,2*2,3*3,...,10*10]</code>,则可以用<code>[x*x for x in range(1,11)]</code>,把要生成的元素放在前面,后面跟for循环</p>
<p>若用if...else<br><br>
可以在后面只加if:<code>[x for x in range(1,11) if x % 2 == 0]</code><br><br>
或者在前面加if...else:<code>[x if x % 2 == 0 else -x for x in range(1,11)]</code></p>
<h2 id="生成器">生成器</h2>
<p>不必创造完整的list,节省内存<br><br>
一边循环一边计算,生成器generator</p>
<p>创建generator<br><br>
方法一,把列表生成式的<code>[ ]</code>改成<code>( )</code>即可</p>
<pre><code>g = (x*x for x in range(10))
</code></pre>
<p>打印generator可以用next()函数,它不断获取其下一个返回值<br><br>
或是for循环<code>for n in g: print(n)</code></p>
<p>用<code>yield</code>关键字定义generator,一个函数定义中包含<code>yield</code>,则这个函数为generator函数<br><br>
generator函数调用next()时执行,遇到<code>yield</code>语句返回,再次执行时从上次返回的<code>yield</code>处继续执行.</p>
<p>如斐波那契数列生成</p>
<pre><code>def fib(max):
    n,a,b = 0,0,1
    while n &lt; max:
        yield b
        a,b = b,a+b
        n=n+1
    return 'done'

for i in fib()
f=fib(6) #需要这样做,之后就用f,不然每次调用函数会重新生成
</code></pre>
<h2 id="迭代器">迭代器</h2>
<p>可以直接作用于for循环的对象统称可迭代对象<code>Iterable</code><br><br>
使用<code>isinstance()</code>判断是否Iterable对象</p>
<pre><code>from collections.abc import Iterable
isinstance([],Iterable)
</code></pre>
<p>可以用<code>next()</code>函数调用并返回下一个值的对象称为迭代器<code>Iterator</code><br><br>
使用<code>isinstance()</code>判断是否迭代器</p>
<pre><code>from collections.abc import Iterator
isinstance((x for x in range(10)),Iterator)
</code></pre>
<p>生成器都是Iterator对象<br><br>
list,dict,str是Iterable但不是Iterator,但他们可以用<code>iter()</code>函数编程Iterator</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git操作学习笔记  一]]></title>
        <id>https://ewuzeyu.github.io/post/git_learning/</id>
        <link href="https://ewuzeyu.github.io/post/git_learning/">
        </link>
        <updated>2022-02-20T18:09:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git操作的学习笔记-一">git操作的学习笔记  一</h1>
<p>链接<br>
<a href="https://zhuanlan.zhihu.com/p/276376558" title="git">git操作</a></p>
<h2 id="git-工作流程">git 工作流程</h2>
<ul>
<li>工作区(Workspace)</li>
<li>暂存区(Index/Stage)</li>
<li>本地仓库(Respository)</li>
<li>远程仓库(Remote)</li>
</ul>
<hr>
<p><strong>远程仓库&lt;-(push)- -(pull/clone)-&gt;本地仓库&lt;-(commit)-暂存区&lt;-(add)-工作区</strong></p>
<hr>
<h3 id="基本工作流程">基本工作流程</h3>
<ol>
<li>在工作区中添加修改文件</li>
<li>工作区中的文件放入暂存区</li>
<li>暂存区的文件提交本地git本地仓库</li>
<li>本地仓库推送到远程仓库</li>
</ol>
<h2 id="操作">操作</h2>
<h3 id="初始化">初始化</h3>
<p>两种方式初始化</p>
<pre><code># 方式一:本地生成git
git init
# 方式二:远端克隆仓库
git clone https://github.com/xx/xx.git
</code></pre>
<p>基本配置</p>
<pre><code># 配置用户名
git config --global user.name &quot;name&quot;
# 配置邮箱
git config --global user.email &quot;name@mail.com&quot;
</code></pre>
<p>删除远程仓库</p>
<pre><code>git remote rm origin
</code></pre>
<p>添加远程仓库</p>
<pre><code>git remote add origin https://github.com/xx/xx.git
</code></pre>
<h3 id="推送到远程仓库">推送到远程仓库</h3>
<p>将已修改文件添加到暂存区</p>
<pre><code>git add dir/filename # 添加指定文件
git add . # 添加所有已修改文件
</code></pre>
<p>暂存区改动提交到本地仓库<br><br>
<code>git commit</code>命令后在本地仓库生成40位哈希值,用于版本回退</p>
<pre><code>git commit -m &quot;message&quot; # message即本次提交的说明
</code></pre>
<p>上传至远程仓库</p>
<pre><code>git push -u origin master # master可以换为其他分支
</code></pre>
<h3 id="从远程仓库拉取">从远程仓库拉取</h3>
<p>更新本地</p>
<pre><code>git pull origin master # master可以换为其他分支</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些典型的日系风格人像]]></title>
        <id>https://ewuzeyu.github.io/post/bishojonoshashin/</id>
        <link href="https://ewuzeyu.github.io/post/bishojonoshashin/">
        </link>
        <updated>2022-02-19T22:41:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="日系风格的一些特点">日系风格的一些特点</h2>
<hr>
<ul>
<li>高调</li>
<li>低对比</li>
<li>过曝</li>
<li>逆光</li>
<li>青色调</li>
</ul>
<p>日系本就是某种难以清晰界定的风格<br><br>
并不是所有日系都必须符合以上特点</p>
<p>但是下面来看一些典型<br><br>
图片来源网络</p>
<hr>
<p><img src="https://tva2.sinaimg.cn/mw690/006SGjrugy1gzmybp2eelj33ga4h7b2c.jpg" alt="1" loading="lazy"><br>
<img src="https://tva2.sinaimg.cn/mw690/006SGjrugy1gzmy9n4b0aj314w1njngq.jpg" alt="2" loading="lazy"><br>
<img src="https://tva3.sinaimg.cn/mw690/006SGjrugy1gzmy8jle86j312w1kmk93.jpg" alt="3" loading="lazy"><br>
<br></p>
<hr>
<p>还是比较典型的<br><br>
整体明亮，逆光，局部过曝<br><br>
逆光很好的勾勒出了人物边缘，突出了主题</p>
<hr>
<br>
<figure data-type="image" tabindex="1"><img src="https://tvax2.sinaimg.cn/mw690/006SGjrugy1gzmxwenkh4j30y41f7u0o.jpg" alt="4" loading="lazy"></figure>
<br>
<hr>
<p>低对比度，青色调</p>
<hr>
<br>
<p><img src="https://tvax1.sinaimg.cn/mw690/006SGjrugy1gzmyh5lex7j33co4vx1kz.jpg" alt="5" loading="lazy"><br>
<img src="https://tva2.sinaimg.cn/mw690/006SGjrugy1gzmy2k0ad7j32rz1uox6r.jpg" alt="6" loading="lazy"><br>
<img src="https://tva4.sinaimg.cn/mw690/006SGjrugy1gzmycyx3lnj32la3s94qu.jpg" alt="7" loading="lazy"></p>
<br>
<hr>
<p>相对而言中规中矩，但仍然可以算日系，因为其画面表达的正是日系的宁静、小清新的主题</p>
<br>
<hr>
<br>
<p>其实上面这些都是国内摄影师拍的<br><br>
下面这张三上老师和相泽老师的自拍，才是真正的日系照片[doge]<br>
<br><br>
<img src="https://tvax2.sinaimg.cn/mw690/006SGjrugy1gzmz32ukphj30u011in4f.jpg" alt="1645563502125" loading="lazy"><br>
<br><br>
iphone前置镜头果然不行<br><br>
p的有点狠，快认不出来了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【柚斐书评】《月亮与六便士》]]></title>
        <id>https://ewuzeyu.github.io/post/review_TheMoonAndSixpence/</id>
        <link href="https://ewuzeyu.github.io/post/review_TheMoonAndSixpence/">
        </link>
        <updated>2021-10-06T07:45:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="月亮与六便士书评">《月亮与六便士》书评</h2>
<br>
<p>这本书引人深思，人生的意义是什么，我们又该追求怎样的人生。</p>
<hr>
<br>
<p>毫无疑问小说的主人公应该是思特里克兰德，但描述却是以“我”这个有限的视角展开。大致可以分为三段。第一段讲我与思特里克兰德的渊源，以及他突然追求变化的原因。第二段时隔五年再次深入思特里克兰德的生活。第三段则是他死后多年，来到他晚年曾住的地方探访曾经的故事。也大概从几个侧面，表现出了思特里克兰德这个特点鲜明的角色。</p>
<br>
<p>思特里克兰德是个一心追求崇高理想的艺术家。他对于物质生活毫不在乎，也近乎无视社会人伦，却狂热地追求艺术理想。他抛弃一切去过想要的生活确实相当有魄力。不过有一点遗憾的是作者似乎并没有特别明确地表达思特里克兰德作品传达的、或者本人追求的艺术理念。通篇看下来就是泛泛而谈地给人震撼，多么深刻难以理解的美。当然其角色原型高更也是个印象派画家，其中特色大概也只可意会不可言传，如此表达反倒也妥当。纵观来看，大概他是在追求一种不加雕琢的原始的美感。</p>
<br>
<p>当然我本人身在秩序阵营，对于这样的角色其实不太喜欢。追求理念确实可贵，但却也不至于否认其余一切。他漠视社会人伦，远离文明，颇有历史虚无之感，不论从艺术价值还是内在发展逻辑而言都不太妥当。</p>
<br>
<hr>
<p><em>柚斐</em><br>
<em>2021.10.7</em></p>
]]></content>
    </entry>
</feed>